%% PAC Connectivity analysis
%  Connectivity analsysis for PAC histograms generated by pacHist function.
% 
%  AG 1/2024

% cd('/Users/tnl/matlab/stereoEEG')
 
clear; close all; clc;

% load data
root = '/Users/tnl/Library/CloudStorage/Box-Box/sEEG';
subj = 'HUP241_RID890'; % session name
filepath = fullfile(root,subj);
load(fullfile(filepath, [subj '_Induction.mat']));

% Parameters
conn = conndef(4, 'minimal');
threshold = 0.95; 
column = 4;

% create binary data matrix
[binData, valData] = createBinaryMatrix(PACparam, PACmi, channel_labels,...
    threshold, column);
% PACmi columns [1-tmi, 2-mrl, 3-mu, 4-tmip, 5-mrlp]

% run permutation test
nperm = 1000; shuffdims = [1 3]; % [1-Channel 2-Phase 3-Amplitude 4-Time]
[dist, permThreshold] = runPermTest(binData, valData, shuffdims, nperm, conn);

% run test data connectivity
locbin = find(PACparam.t > tones.LOC,1)-1; % finds time bin including LOC 
cc = connectivity(binData, valData, conn, permThreshold, locbin);

%% Create histogram of permutation test connectivity distribution
figure
histogram(dist, 'BinMethod','auto' ,'Normalization', 'probability');
title('Modulation Index of Connected Sets - Permutation Test');
xlabel('Sum of MI for All Voxels in Connected Set');
ylabel('Probability');
set(gca,'XScale','log','YScale','log')
xline(permThreshold, 'r', 'LineWidth', 1, 'Label', ['Threshold:' string(permThreshold)]);

%% Create histogram of test data connectivity distribution
figure
tdist = histcounts(cc(:,5), [unique(cc(:,5)); max(unique(cc(:,5)))+1]);
histogram(tdist, 'Normalization', 'count','BinMethod','auto' );
title('Connected Set Sizes');
xlabel('Number of Voxels');
yticks(0:max(histcounts(tdist)))
ylabel('Count');
axis tight

%% 3D scatter plot of all connected sets

uchannels = unique(cc(:,1));
ccplot = zeros(size(cc));
for r = 1:length(ccplot)
    ccplot(r,1) = find(uchannels == cc(r,1));
    ccplot(r,2) = cc(r,2);
    ccplot(r,3) = cc(r,3);
    ccplot(r,4) = cc(r,4);
    ccplot(r,5) = cc(r,5);
end

fig = figure('Position', [100, 100, 800, 600]);
for scat=1:length(uchannels)
    scatterObj = scatter3(...
        ccplot(ccplot(:,1)==scat, 2),...
        ccplot(ccplot(:,1)==scat, 3),...
        ccplot(ccplot(:,1)==scat, 4)-locbin,...
        50, ccplot(ccplot(:,1)==scat, 1), 'filled');
    hold on
end

[~, NA, NP, Nt] = size(binData);

vertices = [0,0,0; NP+1,0,0; NP+1,NA+1,0; 0,NA+1,0];
faces = [1, 2, 3, 4];
patch('Vertices', vertices, 'Faces', faces, 'FaceColor', 'black', 'FaceAlpha', 0.25);


colorLabels = cell(length(uchannels)+1,1);
for color = 1:length(uchannels)
    colorLabels{color} = channel_labels{uchannels(color),2};
end
colorLabels{end} = 'LOC';
title([subj(1:6) ' Phase Amplitude Coupling - All Connected Sets']);
xlabel('Phase Frequency (Hz)'); ylabel('Amplitude Frequency (Hz)'); zlabel('Time (s)');
xlim([0,NP+1]); ylim([0,NA+1]); zlim([min(cc(:,4))-locbin,max(cc(:,4))-locbin])
colormap("jet");
yticks(1:NA); xticks(1:NP);
ytick = get(gca,'YTick'); set(gca,'YTickLabel',num2str(mean(PACparam.rA(ytick,:),2),'%4.2f\n'));
xtick = get(gca,'XTick'); set(gca,'XTickLabel',num2str(mean(PACparam.rP(xtick,:),2),'%4.2f\n'));
ztick = get(gca,'ZTick'); set(gca,'ZTickLabel',num2str(ztick*PACparam.tstp,'%i\n'));
legend(colorLabels)

%% FUNCTIONS


function [binMat, valMat] = createBinaryMatrix(PACparam, PACstatistic,...
    labels, thresh, col)
% create binary matrix - outputs the binary matrix binMat containing zeros
% in all dummy channels

gcidx = find(ismember(labels(:,1),PACparam.channel_labels(:,1)));
bcidx = find(~ismember(labels(:,1),PACparam.channel_labels(:,1)));
Tch = length(labels);
[~, NP, NA, Nt, ~] = size(PACstatistic);
binMat = zeros(Tch, NP, NA, Nt);
valMat = zeros(Tch, NP, NA, Nt);
for ich = 1:Tch
    if any(ismember(gcidx,ich))
        binMat(ich,:,:,:) = PACstatistic(gcidx == ich,:,:,:,col) >= thresh;
        valMat(ich,:,:,:) = PACstatistic(find(gcidx==ich),:,:,:,1);
    elseif any(ismember(bcidx,ich))
        binMat(ich,:,:,:) = zeros(NP,NA,Nt);
        valMat(ich,:,:,:) = zeros(NP,NA,Nt);
    end
end
end


function [connSumDistribution, permThreshold] = runPermTest(binMat, valMat,...
    shuffdims, nPerm, conn)
% permutation test - outputs connectivity distribution and connected set
% sum-based statistic threshold

cidx = find(any(binMat ~= 0, [2 3 4])); % indices of data channels 
ndim = size(binMat);
cDist = cell(nPerm,1);
for p = 1:nPerm
    permutedData = binMat;
    for n = shuffdims
        if n == 1
            idx = cidx; 
            permutedData(idx, :, :, :) = permutedData(idx(randperm(length(idx))), :, :, :);
        elseif n == 2
            idx = 1:ndim(n); 
            permutedData(:, idx, :, :) = permutedData(:, idx(randperm(length(idx))), :, :);
        elseif n == 3
            idx = 1:ndim(n); 
            permutedData(:, :, idx, :) = permutedData(:, :, idx(randperm(length(idx))), :);
        elseif n == 4
            idx = 1:ndim(n); 
            permutedData(:, :, :, idx) = permutedData(:, :, :, idx(randperm(length(idx))));
        end
    end
    CC = bwconncomp(permutedData,conn); % determine connectedness
    cDist{p} = CC.PixelIdxList; % store connected voxel matrix
end
connSumCell = cellfun(@(nestedCellArray) cellfun(@(idx) sum(valMat(idx)),...
    nestedCellArray), cDist, 'UniformOutput', false);
connSumDistribution = horzcat(connSumCell{:});
permThreshold = quantile(connSumDistribution,0.95);
end


function cc = connectivity(binMat, valMat, conn, permThreshold, loctime)
% find test data connectivity - outputs matrix of connected voxel. Each row
% corresponds to a voxel. Columns are as follows [channels, phases,
% amplitudes, times, cluster identifier]

% Find connected components in binary matrix
CC = bwconncomp(binMat,conn);
ccN = cellfun(@numel,CC.PixelIdxList); % sizes of connected voxel sets

% Filter for connected voxel sets with larger sums than perm threshold
connSums = cellfun(@(idx) sum(valMat(idx)), CC.PixelIdxList);
ccIdx = connSums > permThreshold;
pacCC = cat(1, CC.PixelIdxList{1,ccIdx});

% Create connected set identifier list
it = 1; setid = [];
for i = ccN(ccIdx)
    id = ones(i,1)*it;
    it = it+1;
    setid = [setid; id];
end
[channels, phases, amps, times] = ind2sub(size(binMat), pacCC);
cc = [channels, phases, amps, times, setid];
end
